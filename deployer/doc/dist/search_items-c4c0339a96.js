searchNodes=[{"doc":"Documentation for Deployer. Main module to be called from cli.","ref":"Deployer.html","title":"Deployer","type":"module"},{"doc":"Deploys instance defined by manifest into a vpc.Parameters* manifest - Manifest loaded from `manifest.yaml` * vpc_id - VPC to deploy into * key - key_pair to use in ec2 * private_key_path - Path to private key file to use (private key of key_pair) * known_hosts_path - Path to known hosts file","ref":"Deployer.html#deploy/5","title":"Deployer.deploy/5","type":"function"},{"doc":"CLI interface for deployer. This is the default entry point for the escript.","ref":"Deployer.CLI.html","title":"Deployer.CLI","type":"module"},{"doc":"","ref":"Deployer.CLI.html#default_command/0","title":"Deployer.CLI.default_command/0","type":"function"},{"doc":"","ref":"Deployer.CLI.html#main/1","title":"Deployer.CLI.main/1","type":"function"},{"doc":"","ref":"Deployer.CLI.html#name/0","title":"Deployer.CLI.name/0","type":"function"},{"doc":"","ref":"Deployer.Helpers.html","title":"Deployer.Helpers","type":"module"},{"doc":"","ref":"Deployer.Helpers.html#get_public_ip/0","title":"Deployer.Helpers.get_public_ip/0","type":"function"},{"doc":"Returns indexed list of tuples for user to select from.Parameters* choices - List of structsReturns list such as [{%{name: NAME, id: ID, description, DESC}, 0}, {%{name: NAME, id: ID, description, DESC}, 1}]","ref":"Deployer.Helpers.html#map_choices/1","title":"Deployer.Helpers.map_choices/1","type":"function"},{"doc":"Instance is a module to hold the structure of a ec2 instance. It also handles interaction with the ec2 instance.These interactions include: connecting via ssh, uploading files, and running commands.","ref":"Deployer.Instance.html","title":"Deployer.Instance","type":"module"},{"doc":"Establish ssh connection to instance.Parameters* ip - IP of host to connect to * username - User to use for login * private_key_file - Path to private key file to use (private key of key_pair) * known_hosts_file - Path to known hosts file * retries - Number of retries to use on connection","ref":"Deployer.Instance.html#connect_ssh/5","title":"Deployer.Instance.connect_ssh/5","type":"function"},{"doc":"Returns list of VPC structs from xml formatted originalParameters* data - XML string of security groups object","ref":"Deployer.Instance.html#map/1","title":"Deployer.Instance.map/1","type":"function"},{"doc":"Run command on established ssh connection.Parameters* connection - SSH connection from `connect_ssh` * cmd - Command to run on instance","ref":"Deployer.Instance.html#run_command/2","title":"Deployer.Instance.run_command/2","type":"function"},{"doc":"Run multiple commands on established ssh connectionParameters* connection - SSH connection from `connect_ssh` * commands - List of commands to run","ref":"Deployer.Instance.html#run_commands/2","title":"Deployer.Instance.run_commands/2","type":"function"},{"doc":"Upload file to instance.Parameters* ip - IP of host to connect to * username - User to use for login * private_key_file - Path to private key file to use (private key of key_pair) * known_hosts_file - Path to known hosts file * file - Map defining `src` and `dest` of file to upload","ref":"Deployer.Instance.html#upload_file/5","title":"Deployer.Instance.upload_file/5","type":"function"},{"doc":"Upload multiple files to instance.Parameters* ip - IP of host to connect to * username - User to use for login * private_key_file - Path to private key file to use (private key of key_pair) * known_hosts_file - Path to known hosts file * files - List of files to upload defined by maps with `src` and `dest` of file to upload","ref":"Deployer.Instance.html#upload_files/5","title":"Deployer.Instance.upload_files/5","type":"function"},{"doc":"Main module for interacting with AWS.These interactions include: preflight checks, launching instances, security group interaction, subnet interaction, and more.","ref":"Deployer.Instances.html","title":"Deployer.Instances","type":"module"},{"doc":"Bootstrap instance by installing dependencies and desired files in manifest.Parameters* manifest - Manifest to use to deploy * instance - Instance that has already been deployed * private_key_path - Path to private key file to use (private key of key_pair) * known_hosts_path - Path to known hosts file","ref":"Deployer.Instances.html#bootstrap/4","title":"Deployer.Instances.bootstrap/4","type":"function"},{"doc":"Get instance status.Parameters* instance - Instance from aws","ref":"Deployer.Instances.html#get_instance_status/1","title":"Deployer.Instances.get_instance_status/1","type":"function"},{"doc":"Get security group selection from user by querying EC2 and asking for choice.Parameters* vpc_id - VPC id already generated ahead of time","ref":"Deployer.Instances.html#get_security_group/1","title":"Deployer.Instances.get_security_group/1","type":"function"},{"doc":"Get subnet selection from user by querying EC2 and asking for choice.Parameters* vpc_id - VPC id already generated ahead of time","ref":"Deployer.Instances.html#get_subnet/1","title":"Deployer.Instances.get_subnet/1","type":"function"},{"doc":"Checks if given vpc exists, Deployer doesn't current support creating vpcsParameters* vpc_id - VPC id already generated ahead of time","ref":"Deployer.Instances.html#get_vpc/1","title":"Deployer.Instances.get_vpc/1","type":"function"},{"doc":"Launch ec2 instance after getting user input.Parameters* manifest - Manifest to use to deploy * vpc_id - Id of vpc to launch in * key_pair - EC2 key pair to use (must already be loaded in aws)","ref":"Deployer.Instances.html#launch/3","title":"Deployer.Instances.launch/3","type":"function"},{"doc":"Run preflight to get user input for desired subnet and security group.Parameters* vpc_id - Id of vpc to launch in","ref":"Deployer.Instances.html#preflight/1","title":"Deployer.Instances.preflight/1","type":"function"},{"doc":"Run instance defined in manifest.Parameters* manifest - Manifest to use to deploy * subnet - Subnet to launch in * security_group - Security group to add to instance * key_pair - EC2 key pair to use","ref":"Deployer.Instances.html#run_instance/4","title":"Deployer.Instances.run_instance/4","type":"function"},{"doc":"Start application that has been uploaded.Parameters* manifest - Manifest to use to deploy * instance - Instance that has already been deployed * private_key_path - Path to private key file to use (private key of key_pair) * known_hosts_path - Path to known hosts file","ref":"Deployer.Instances.html#start_app/4","title":"Deployer.Instances.start_app/4","type":"function"},{"doc":"Wait for instance to enter the running state.Parameters* instance - Instance from aws","ref":"Deployer.Instances.html#wait_until_running/1","title":"Deployer.Instances.wait_until_running/1","type":"function"},{"doc":"Module for defining deployable application manifests.It is a structure intended to hold the data from project manifest.yaml files. Some basic data manipulation is done on load.","ref":"Deployer.Manifest.html","title":"Deployer.Manifest","type":"module"},{"doc":"Loads manifest into structure for a provided file.Parameters* app_path - Path of application path to load from","ref":"Deployer.Manifest.html#load/1","title":"Deployer.Manifest.load/1","type":"function"},{"doc":"SecurityGroup is a module to hold the structure of a security group. It also handles interaction with the use.It is capable of adding ingress rules on demand for a provided security group.","ref":"Deployer.SecurityGroup.html","title":"Deployer.SecurityGroup","type":"module"},{"doc":"Loads security_group with all required rules. Intended to be idempotent and not error if rules already existParameters* security_group - `Deployer.SecurityGroup` to add rules toReturns :ok if no errors occured. Otherwise {:error, ERROR}","ref":"Deployer.SecurityGroup.html#add_required_rules/1","title":"Deployer.SecurityGroup.add_required_rules/1","type":"function"},{"doc":"Returns user picked security group id. Will create security group if necassaryParameters* security_groups - List of security group structs","ref":"Deployer.SecurityGroup.html#get_user_choice/1","title":"Deployer.SecurityGroup.get_user_choice/1","type":"function"},{"doc":"Returns list of SecurityGroup structs from xml formatted originalParameters* data - XML string of security groups object","ref":"Deployer.SecurityGroup.html#map/1","title":"Deployer.SecurityGroup.map/1","type":"function"},{"doc":"Returns selected security group struct based on users choiceParameters* choice - Tuple choice from integer check * choices - Mapped choices to user choice * security_groups - All existing security groups","ref":"Deployer.SecurityGroup.html#user_select/3","title":"Deployer.SecurityGroup.user_select/3","type":"function"},{"doc":"Subnet is a module to hold the structure of a subnet. It also handles interaction with the use.","ref":"Deployer.Subnet.html","title":"Deployer.Subnet","type":"module"},{"doc":"Returns user picked subnet. Will create subnet if necassaryParameters* subnets - List of subnet structs","ref":"Deployer.Subnet.html#get_user_choice/1","title":"Deployer.Subnet.get_user_choice/1","type":"function"},{"doc":"Returns list of Subnet structs from xml formatted originalParameters* data - XML string of subnet object","ref":"Deployer.Subnet.html#map/1","title":"Deployer.Subnet.map/1","type":"function"},{"doc":"Returns selected subnets group struct based on users choiceParameters* choice - Tuple choice from integer check * choices - Mapped choices to user choice * subnets - All existing subnets","ref":"Deployer.Subnet.html#user_select/3","title":"Deployer.Subnet.user_select/3","type":"function"},{"doc":"VPC is a module to hold the structure of a vpc.It's main purpose is to convert xml from the requests into a stucture.","ref":"Deployer.VPC.html","title":"Deployer.VPC","type":"module"},{"doc":"Returns list of VPC structs from xml formatted originalParameters* data - XML string of security groups object","ref":"Deployer.VPC.html#map/1","title":"Deployer.VPC.map/1","type":"function"}]